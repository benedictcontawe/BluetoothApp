Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\n\r\nandroid {\r\n    compileSdkVersion 29\r\n    defaultConfig {\r\n        applicationId \"com.example.benedict.bluetootharduino\"\r\n        minSdkVersion 14\r\n        targetSdkVersion 29\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n        testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\r\n    }\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\r\n\r\n    //Android UI Layout Library and backward-compatible Library(Legacy)\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    implementation 'androidx.appcompat:appcompat:1.1.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'\r\n\r\n    //Life Cycle Components\r\n    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'\r\n    annotationProcessor 'androidx.lifecycle:lifecycle-compiler:2.2.0'\r\n\r\n    //Android Unit Test and U.I. Test Library\r\n    testImplementation 'junit:junit:4.12'\r\n    androidTestImplementation 'androidx.test:runner:1.2.0'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	
+++ b/app/build.gradle	
@@ -1,5 +1,10 @@
 apply plugin: 'com.android.application'
 
+apply plugin: 'kotlin-android'
+
+apply plugin: 'kotlin-android-extensions'
+
+apply plugin: 'kotlin-kapt'
 android {
     compileSdkVersion 29
     defaultConfig {
@@ -22,13 +27,22 @@
     implementation fileTree(dir: 'libs', include: ['*.jar'])
 
     //Android UI Layout Library and backward-compatible Library(Legacy)
-    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
-    implementation 'androidx.appcompat:appcompat:1.1.0'
-    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
+    implementation 'androidx.appcompat:appcompat:1.2.0'
+    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
+    implementation "androidx.legacy:legacy-support-v4:1.0.0"
+    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
+    implementation 'com.google.android.material:material:1.3.0-beta01'
 
     //Life Cycle Components
+    implementation "android.arch.lifecycle:extensions:2.0.0"
     implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
-    annotationProcessor 'androidx.lifecycle:lifecycle-compiler:2.2.0'
+    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"
+    annotationProcessor 'androidx.lifecycle:lifecycle-compiler:2.2.0' //kapt "android.arch.lifecycle:compiler:2.0.0"
+
+
+    //Kotlin Library
+    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
+    implementation 'androidx.core:core-ktx:1.3.2'
 
     //Android Unit Test and U.I. Test Library
     testImplementation 'junit:junit:4.12'
Index: .idea/runConfigurations.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/runConfigurations.xml b/.idea/runConfigurations.xml
deleted file mode 100644
--- a/.idea/runConfigurations.xml	
+++ /dev/null	
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="RunConfigurationProducerService">
-    <option name="ignoredProducers">
-      <set>
-        <option value="org.jetbrains.plugins.gradle.execution.test.runner.AllInPackageGradleConfigurationProducer" />
-        <option value="org.jetbrains.plugins.gradle.execution.test.runner.TestClassGradleConfigurationProducer" />
-        <option value="org.jetbrains.plugins.gradle.execution.test.runner.TestMethodGradleConfigurationProducer" />
-      </set>
-    </option>
-  </component>
-</project>
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n        <option name=\"useQualifiedModuleNames\" value=\"true\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	
+++ b/.idea/gradle.xml	
@@ -4,7 +4,7 @@
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
-        <option name="testRunner" value="PLATFORM" />
+        <option name="testRunner" value="GRADLE" />
         <option name="distributionType" value="DEFAULT_WRAPPED" />
         <option name="externalProjectPath" value="$PROJECT_DIR$" />
         <option name="modules">
@@ -14,7 +14,6 @@
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
-        <option name="useQualifiedModuleNames" value="true" />
       </GradleProjectSettings>
     </option>
   </component>
Index: .idea/deploymentTargetDropDown.xml
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/deploymentTargetDropDown.xml	
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="deploymentTargetDropDown">
+    <targetSelectedWithDropDown>
+      <Target>
+        <type value="QUICK_BOOT_TARGET" />
+        <deviceKey>
+          <Key>
+            <type value="VIRTUAL_DEVICE_PATH" />
+            <value value="C:\Users\Benedict\.android\avd\Nexus_One_API_28.avd" />
+          </Key>
+        </deviceKey>
+      </Target>
+    </targetSelectedWithDropDown>
+    <timeTargetWasSelectedWithDropDown value="2021-12-15T03:09:46.975065500Z" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"NullableNotNullManager\">\r\n    <option name=\"myDefaultNullable\" value=\"android.support.annotation.Nullable\" />\r\n    <option name=\"myDefaultNotNull\" value=\"android.support.annotation.NonNull\" />\r\n    <option name=\"myNullables\">\r\n      <value>\r\n        <list size=\"10\">\r\n          <item index=\"0\" class=\"java.lang.String\" itemvalue=\"org.jetbrains.annotations.Nullable\" />\r\n          <item index=\"1\" class=\"java.lang.String\" itemvalue=\"javax.annotation.Nullable\" />\r\n          <item index=\"2\" class=\"java.lang.String\" itemvalue=\"javax.annotation.CheckForNull\" />\r\n          <item index=\"3\" class=\"java.lang.String\" itemvalue=\"edu.umd.cs.findbugs.annotations.Nullable\" />\r\n          <item index=\"4\" class=\"java.lang.String\" itemvalue=\"android.support.annotation.Nullable\" />\r\n          <item index=\"5\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.Nullable\" />\r\n          <item index=\"6\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.RecentlyNullable\" />\r\n          <item index=\"7\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.qual.Nullable\" />\r\n          <item index=\"8\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NullableDecl\" />\r\n          <item index=\"9\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NullableType\" />\r\n        </list>\r\n      </value>\r\n    </option>\r\n    <option name=\"myNotNulls\">\r\n      <value>\r\n        <list size=\"9\">\r\n          <item index=\"0\" class=\"java.lang.String\" itemvalue=\"org.jetbrains.annotations.NotNull\" />\r\n          <item index=\"1\" class=\"java.lang.String\" itemvalue=\"javax.annotation.Nonnull\" />\r\n          <item index=\"2\" class=\"java.lang.String\" itemvalue=\"edu.umd.cs.findbugs.annotations.NonNull\" />\r\n          <item index=\"3\" class=\"java.lang.String\" itemvalue=\"android.support.annotation.NonNull\" />\r\n          <item index=\"4\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.NonNull\" />\r\n          <item index=\"5\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.RecentlyNonNull\" />\r\n          <item index=\"6\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.qual.NonNull\" />\r\n          <item index=\"7\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NonNullDecl\" />\r\n          <item index=\"8\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NonNullType\" />\r\n        </list>\r\n      </value>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" default=\"true\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -5,7 +5,7 @@
     <option name="myDefaultNotNull" value="android.support.annotation.NonNull" />
     <option name="myNullables">
       <value>
-        <list size="10">
+        <list size="14">
           <item index="0" class="java.lang.String" itemvalue="org.jetbrains.annotations.Nullable" />
           <item index="1" class="java.lang.String" itemvalue="javax.annotation.Nullable" />
           <item index="2" class="java.lang.String" itemvalue="javax.annotation.CheckForNull" />
@@ -16,12 +16,16 @@
           <item index="7" class="java.lang.String" itemvalue="org.checkerframework.checker.nullness.qual.Nullable" />
           <item index="8" class="java.lang.String" itemvalue="org.checkerframework.checker.nullness.compatqual.NullableDecl" />
           <item index="9" class="java.lang.String" itemvalue="org.checkerframework.checker.nullness.compatqual.NullableType" />
+          <item index="10" class="java.lang.String" itemvalue="com.android.annotations.Nullable" />
+          <item index="11" class="java.lang.String" itemvalue="org.eclipse.jdt.annotation.Nullable" />
+          <item index="12" class="java.lang.String" itemvalue="io.reactivex.annotations.Nullable" />
+          <item index="13" class="java.lang.String" itemvalue="io.reactivex.rxjava3.annotations.Nullable" />
         </list>
       </value>
     </option>
     <option name="myNotNulls">
       <value>
-        <list size="9">
+        <list size="14">
           <item index="0" class="java.lang.String" itemvalue="org.jetbrains.annotations.NotNull" />
           <item index="1" class="java.lang.String" itemvalue="javax.annotation.Nonnull" />
           <item index="2" class="java.lang.String" itemvalue="edu.umd.cs.findbugs.annotations.NonNull" />
@@ -31,11 +35,16 @@
           <item index="6" class="java.lang.String" itemvalue="org.checkerframework.checker.nullness.qual.NonNull" />
           <item index="7" class="java.lang.String" itemvalue="org.checkerframework.checker.nullness.compatqual.NonNullDecl" />
           <item index="8" class="java.lang.String" itemvalue="org.checkerframework.checker.nullness.compatqual.NonNullType" />
+          <item index="9" class="java.lang.String" itemvalue="com.android.annotations.NonNull" />
+          <item index="10" class="java.lang.String" itemvalue="org.eclipse.jdt.annotation.NonNull" />
+          <item index="11" class="java.lang.String" itemvalue="io.reactivex.annotations.NonNull" />
+          <item index="12" class="java.lang.String" itemvalue="io.reactivex.rxjava3.annotations.NonNull" />
+          <item index="13" class="java.lang.String" itemvalue="lombok.NonNull" />
         </list>
       </value>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Wed Jul 03 17:49:37 CST 2019\r\ndistributionBase=GRADLE_USER_HOME\r\ndistributionPath=wrapper/dists\r\nzipStoreBase=GRADLE_USER_HOME\r\nzipStorePath=wrapper/dists\r\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-5.1.1-all.zip\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
--- a/gradle/wrapper/gradle-wrapper.properties	
+++ b/gradle/wrapper/gradle-wrapper.properties	
@@ -1,6 +1,6 @@
-#Wed Jul 03 17:49:37 CST 2019
+#Tue Jan 05 15:25:31 SGT 2021
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-5.1.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-6.5-bin.zip
Index: app/src/main/java/com/example/benedict/simstate/MainViewModelX.kt
===================================================================
diff --git a/app/src/main/java/com/example/benedict/simstate/MainViewModelX.kt b/app/src/main/java/com/example/benedict/simstate/MainViewModelX.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/benedict/simstate/MainViewModelX.kt	
@@ -0,0 +1,181 @@
+package com.example.benedict.simstate
+
+import android.annotation.SuppressLint
+import android.app.Application
+import android.content.Context
+import android.os.Build
+import android.telephony.PhoneStateListener
+import android.telephony.SubscriptionInfo
+import android.telephony.SubscriptionManager
+import android.telephony.TelephonyManager
+import android.util.Log
+import androidx.lifecycle.AndroidViewModel
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.MutableLiveData
+
+class MainViewModelX : AndroidViewModel {
+
+    companion object {
+        private val TAG : String = MainViewModel::class.java.getSimpleName();
+    }
+
+    private val telephonyManager : TelephonyManager;
+    private var subscriptionManager : SubscriptionManager;
+    private var subscriptionInfo : SubscriptionInfo;
+    private val simChangedListener : SimChangedListener;
+    private val liveSimState : MutableLiveData<Boolean> = MutableLiveData<Boolean>();
+
+    constructor(application : Application) : super(application) {
+        Log.d(TAG,"Constructor");
+        telephonyManager = application.getSystemService(Context.TELEPHONY_SERVICE) as TelephonyManager;
+        simChangedListener = SimChangedListener(this@MainViewModelX);
+        //setSubscription(application);
+    }
+    //region Subscription methods for LOLLIPOP_MR1
+    @SuppressLint("MissingPermission")
+    private fun setSubscription(application : Application) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP_MR1) {
+            subscriptionManager = application.getSystemService(Context.TELEPHONY_SUBSCRIPTION_SERVICE) as SubscriptionManager;
+            subscriptionInfo = subscriptionManager.getActiveSubscriptionInfoForSimSlotIndex(0);
+        } else {
+            Log.d(TAG,"setSubscription() else");
+        }
+    }
+
+    private fun checkSubscriptionInfo() : Boolean {
+        if (subscriptionInfo != null && !subscriptionInfo.getCountryIso().isEmpty()) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+    //endregion
+    //region Register Unregister Sim State Detection Callback
+    public fun registerSimState() {
+        telephonyManager.listen(simChangedListener, PhoneStateListener.LISTEN_SERVICE_STATE or PhoneStateListener.LISTEN_SIGNAL_STRENGTHS);
+    }
+
+    public fun unregisterSimState() {
+        telephonyManager.listen(simChangedListener,PhoneStateListener.LISTEN_NONE);
+    }
+    //endregion
+    public fun checkSimState() {
+        liveSimState.postValue(isSimMounted());
+    }
+    //region Telephony Manager Methods
+    private boolean isSimMounted() {
+        Log.d(TAG,"checkSimState()");
+        boolean isAvailable;
+        int simState;
+        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
+            simState = telephonyManager.getSimState(0);
+        } else {
+            simState = telephonyManager.getSimState();
+        }
+        switch (simState) {
+            case TelephonyManager.SIM_STATE_READY:
+            isAvailable = true;
+            Log.d(TAG,"TelephonyManager.SIM_STATE_READY");
+            break;
+            case TelephonyManager.SIM_STATE_ABSENT: //SimState = “No Sim Found!”;
+            isAvailable = false;
+            Log.d(TAG,"TelephonyManager.SIM_STATE_ABSENT");
+            break;
+            case TelephonyManager.SIM_STATE_NETWORK_LOCKED: //SimState = “Network Locked!”;
+            isAvailable = false;
+            Log.d(TAG,"TelephonyManager.SIM_STATE_NETWORK_LOCKED");
+            break;
+            case TelephonyManager.SIM_STATE_PIN_REQUIRED: //SimState = “PIN Required to access SIM!”;
+            isAvailable = false;
+            Log.d(TAG,"TelephonyManager.SIM_STATE_PIN_REQUIRED");
+            break;
+            case TelephonyManager.SIM_STATE_PUK_REQUIRED: //SimState = “PUK Required to access SIM!”; // Personal Unblocking Code
+            isAvailable = false;
+            Log.d(TAG,"TelephonyManager.SIM_STATE_PUK_REQUIRED");
+            break;
+            case TelephonyManager.SIM_STATE_UNKNOWN: //SimState = “Unknown SIM State!”;
+            isAvailable = false;
+            Log.d(TAG,"TelephonyManager.SIM_STATE_UNKNOWN");
+            break;
+            default:
+            isAvailable = false;
+            Log.d(TAG,"TelephonyManager.default");
+            break;
+        }
+        return isAvailable;
+    }
+
+    private int getPhoneType() {
+        switch (telephonyManager.getPhoneType()) {
+            case TelephonyManager.PHONE_TYPE_SIP:
+            Log.d(TAG,"getPhoneType() : TelephonyManager.PHONE_TYPE_SIP");
+            break;
+            case TelephonyManager.PHONE_TYPE_CDMA:
+            Log.d(TAG,"getPhoneType() : TelephonyManager.PHONE_TYPE_CDMA");
+            break;
+            case TelephonyManager.PHONE_TYPE_GSM:
+            Log.d(TAG,"getPhoneType() : TelephonyManager.PHONE_TYPE_GSM");
+            break;
+            case TelephonyManager.PHONE_TYPE_NONE:
+            Log.d(TAG,"getPhoneType() : TelephonyManager.PHONE_TYPE_NONE");
+            break;
+            default:
+            Log.d(TAG,"getPhoneType() : TelephonyManager.PHONE_TYPE_NONE");
+            break;
+        }
+        return telephonyManager.getPhoneType();
+    }
+
+    private boolean isNetworkRoaming() {
+        return telephonyManager.isNetworkRoaming();
+    }
+
+    private String getSoftwareVersion() {
+        if (telephonyManager.getDeviceSoftwareVersion() != null) {
+            return telephonyManager.getDeviceSoftwareVersion();
+        } else  {
+            return "Nil";
+        }
+    }
+
+    private String getVoiceMailNumber() {
+        if (telephonyManager.getVoiceMailNumber() != null) {
+            return telephonyManager.getVoiceMailNumber();
+        } else  {
+            return "Nil";
+        }
+    }
+
+    private String getSimNumber() {
+        return telephonyManager.getLine1Number();
+        //return subscriptionInfo.getNumber();
+    }
+
+    private String getIMSI() {
+        return telephonyManager.getSubscriberId();
+    }
+
+    private String getICCID() {
+        return telephonyManager.getSimSerialNumber();
+        //return subscriptionInfo.getIccId();
+    }
+
+    private String getISOCode() {
+        return telephonyManager.getNetworkCountryIso();
+        //return subscriptionInfo.getCountryIso();
+    }
+
+    private String getSimCountryIso() {
+        return telephonyManager.getSimCountryIso();
+    }
+
+    private fun getNetworkCountryIso() : String {
+        return telephonyManager.getNetworkCountryIso();
+    }
+    //endregion
+    //region LiveData Observers
+    public fun observeLiveSimState() : LiveData<Boolean> {
+        return liveSimState;
+    }
+    //endregion
+}
\ No newline at end of file
Index: app/src/main/java/com/example/benedict/simstate/MainActivity.kt
===================================================================
diff --git a/app/src/main/java/com/example/benedict/simstate/MainActivity.kt b/app/src/main/java/com/example/benedict/simstate/MainActivity.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/benedict/simstate/MainActivity.kt	
@@ -0,0 +1,96 @@
+package com.example.benedict.simstate
+
+import android.content.Intent
+import android.os.Bundle
+import android.util.Log
+import android.widget.Toast
+import androidx.appcompat.app.AppCompatActivity
+import androidx.lifecycle.Observer
+import androidx.lifecycle.ViewModelProvider
+import kotlinx.android.synthetic.main.activity_main.*
+
+public class MainActivity : AppCompatActivity() {
+
+    companion object {
+        private val TAG : String = MainActivity::class.java.getSimpleName();
+        private const val PHONE_STATE : Int = 0;
+    }
+
+    private lateinit var viewModel : MainViewModel;
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_main);
+
+        viewModel = ViewModelProvider(this@MainActivity).get(MainViewModel::class.java);
+        observeData();
+    }
+
+    private fun observeData() {
+        viewModel.observeLiveSimState().observe(this, object : Observer<Boolean> {
+            override fun onChanged(value : Boolean) {
+                if (value) {
+                    txtSim?.setText("Sim is inserted");
+                } else {
+                    txtSim?.setText("Sim is not inserted");
+                }
+            }
+        });
+    }
+
+    override fun onPause() {
+        super.onPause();
+        viewModel.unregisterSimState();
+    }
+
+    override fun onResume() {
+        super.onResume();
+        ManifestPermission.checkSelfPermission(this,
+            ManifestPermission.telephonyPermissions,
+            isGranted = { Log.d(TAG, "Telephony Permissions Granted!") },
+            isDenied = { requestPermission() }
+        )
+        viewModel.checkSimState();
+        viewModel.registerSimState();
+    }
+
+    private fun requestPermission() {
+        ManifestPermission.requestPermissions(this,
+            ManifestPermission.telephonyPermissions,
+            ManifestPermission.TELEPHONY_PERMISSION_CODE
+        )
+    }
+
+    override fun onRequestPermissionsResult(requestCode : Int, permissions : Array<String>, grantResults : IntArray) {
+        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
+        ManifestPermission.checkPermissionsResult(this, permissions, grantResults,
+            isNeverAskAgain =  {
+                Log.d("PermissionsResult", "checkPermissionsResult isNeverAskAgain")
+                when(requestCode) {
+                    ManifestPermission.TELEPHONY_PERMISSION_CODE -> { Log.d(TAG, "Telephony Permissions is Never Ask Again!") }
+                }
+            }, isDenied = {
+                Log.d("PermissionsResult","checkPermissionsResult isDenied")
+                when(requestCode) {
+                    ManifestPermission.TELEPHONY_PERMISSION_CODE -> { requestPermission() }
+                }
+            }, isGranted = {
+                Log.d("PermissionsResult","checkPermissionsResult isGranted")
+                when(requestCode) {
+                    ManifestPermission.TELEPHONY_PERMISSION_CODE -> { Log.d(TAG, "Telephony Permissions Granted!") }
+                }
+            }
+        )
+    }
+
+    override fun onActivityResult(requestCode : Int, resultCode : Int, data : Intent?) {
+        super.onActivityResult(requestCode, resultCode, data)
+        Log.d(TAG,"onActivityResult($requestCode,$resultCode,$data)")
+        if (requestCode == ManifestPermission.SETTINGS_PERMISSION_CODE)
+            Toast.makeText(this,"PERMISSION_SETTINGS_CODE",  Toast.LENGTH_SHORT).show()
+    }
+
+    override fun onDestroy() {
+        super.onDestroy()
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/example/benedict/simstate/ManifestPermission.kt
===================================================================
diff --git a/app/src/main/java/com/example/benedict/simstate/ManifestPermission.kt b/app/src/main/java/com/example/benedict/simstate/ManifestPermission.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/benedict/simstate/ManifestPermission.kt	
@@ -0,0 +1,215 @@
+package com.example.benedict.simstate
+
+import android.Manifest
+import android.app.Activity
+import android.app.AlertDialog
+import android.content.Context
+import android.content.Intent
+import android.content.pm.PackageManager
+import android.net.Uri
+import android.os.Build
+import android.provider.Settings
+import android.util.Log
+import androidx.core.app.ActivityCompat
+import androidx.core.content.ContextCompat
+
+object ManifestPermission {
+
+    private val TAG = ManifestPermission::class.java.simpleName
+
+    const val SETTINGS_PERMISSION_CODE = 1000
+    const val ALL_PERMISSION_CODE = 1001
+    const val TELEPHONY_PERMISSION_CODE = 1002
+    const val MICROPHONE_PERMISSION_CODE = 1003
+    const val CAMERA_PERMISSION_CODE = 1004
+    const val VIDEO_CALL_PERMISSION_CODE = 1005
+    const val GALLERY_PERMISSION_CODE = 1006
+    const val CONTACT_PERMISSION_CODE = 1007
+
+    val allPermissions =
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            arrayOf(
+                Manifest.permission.READ_PHONE_STATE,
+                Manifest.permission.READ_SMS,
+                Manifest.permission.READ_CONTACTS,
+                Manifest.permission.WRITE_CONTACTS,
+                Manifest.permission.READ_EXTERNAL_STORAGE,
+                Manifest.permission.WRITE_EXTERNAL_STORAGE,
+                Manifest.permission.READ_PHONE_NUMBERS
+            )
+        } else {
+            arrayOf(
+                Manifest.permission.READ_PHONE_STATE,
+                Manifest.permission.READ_SMS,
+                Manifest.permission.READ_CONTACTS,
+                Manifest.permission.WRITE_CONTACTS,
+                Manifest.permission.WRITE_EXTERNAL_STORAGE
+            )
+        }
+
+    val telephonyPermissions =
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            arrayOf(
+                Manifest.permission.READ_PHONE_STATE,
+                Manifest.permission.READ_SMS,
+                Manifest.permission.READ_PHONE_NUMBERS
+            )
+        } else {
+            arrayOf(
+                Manifest.permission.READ_PHONE_STATE,
+                Manifest.permission.READ_SMS
+            )
+        }
+
+    val microphonePermission = arrayOf(
+        Manifest.permission.RECORD_AUDIO
+    )
+
+    val cameraPermission = arrayOf(
+        Manifest.permission.CAMERA
+    )
+
+    val videoCallPermission = arrayOf(
+        Manifest.permission.RECORD_AUDIO,
+        Manifest.permission.CAMERA
+    )
+
+    val galleryPermissions = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
+        arrayOf(
+            Manifest.permission.READ_EXTERNAL_STORAGE,
+            Manifest.permission.WRITE_EXTERNAL_STORAGE
+        )
+    } else {
+        arrayOf(
+            Manifest.permission.WRITE_EXTERNAL_STORAGE
+        )
+    }
+
+    val contactPermission =
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            arrayOf(
+                Manifest.permission.READ_CONTACTS,
+                Manifest.permission.WRITE_CONTACTS,
+                Manifest.permission.READ_PHONE_NUMBERS
+            )
+        } else {
+            arrayOf(
+                Manifest.permission.READ_CONTACTS,
+                Manifest.permission.WRITE_CONTACTS
+            )
+        }
+
+    fun checkSelfPermission(context : Context, permission : String, isGranted : () -> Unit = {}, isDenied : () -> Unit = {}) {
+        Log.d(TAG,"checkSelfPermission($context,$permission,isGranted(),isDenied())")
+        if (ContextCompat.checkSelfPermission(context, permission) == PackageManager.PERMISSION_GRANTED) {
+            Log.d(TAG,"allGranted()")
+            isGranted()
+        }
+        else {
+            Log.d(TAG,"denied()")
+            isDenied()
+        }
+    }
+
+    fun checkSelfPermission(context : Context, permissions : Array<String>, isGranted : () -> Unit = {}, isDenied : () -> Unit = {}) {
+        Log.d(TAG,"checkSelfPermission($context,${permissions.contentToString()},isGranted(),isDenied())")
+        if (permissions.filter { permission -> ContextCompat.checkSelfPermission(context, permission) == PackageManager.PERMISSION_DENIED}.isEmpty()) {
+            Log.d(TAG,"allGranted()")
+            isGranted()
+        }
+        else {
+            Log.d(TAG,"denied()")
+            isDenied()
+        }
+    }
+
+    fun requestPermissions(activity : Activity, permission : String, requestCode : Int) {
+        Log.d(TAG,"requestPermissions($activity,$permission,$requestCode")
+        ActivityCompat.requestPermissions(activity, arrayOf(permission),requestCode)
+    }
+
+    fun requestPermissions(activity : Activity, permissions : Array<String>, requestCode : Int) {
+        Log.d(TAG,"requestPermissions($activity,${permissions.contentToString()},$requestCode")
+        ActivityCompat.requestPermissions(activity, permissions,requestCode)
+    }
+
+    fun checkNeverAskAgain(activity : Activity, permission : String, isNeverAskAgain : () -> Unit = {}, isNotNeverAskAgain : () -> Unit = {}) {
+        Log.d(TAG,"hasPermissions($activity,$permission,isNeverAskAgain(),isNotNeverAskAgain())")
+        if (!ActivityCompat.shouldShowRequestPermissionRationale(activity, permission) && ActivityCompat.checkSelfPermission(activity,permission) == PackageManager.PERMISSION_DENIED) {
+            isNeverAskAgain()
+        } else {
+            isNotNeverAskAgain()
+        }
+    }
+
+    fun checkNeverAskAgain(activity : Activity, permissions : Array<String>, isNeverAskAgain : () -> Unit = {}, isNotNeverAskAgain : () -> Unit = {}) {
+        Log.d(TAG,"hasPermissions($activity,${permissions.contentToString()},isNeverAskAgain(),isNotNeverAskAgain())")
+        if(permissions.filter { permission -> ActivityCompat.shouldShowRequestPermissionRationale(activity, permission) && ContextCompat.checkSelfPermission(activity, permission) == PackageManager.PERMISSION_DENIED }.none()) {
+            Log.d(TAG,"isNeverAskAgain()")
+            isNeverAskAgain()
+        }
+        else {
+            Log.d(TAG,"isNotNeverAskAgain()")
+            isNotNeverAskAgain()
+        }
+    }
+
+    fun checkPermissionsResult(activity : Activity, permission : String, isNeverAskAgain : () -> Unit = {}, isDenied : () -> Unit, isGranted : () -> Unit) {
+        if(ActivityCompat.shouldShowRequestPermissionRationale(activity, permission)) {
+            Log.d(TAG, "permission Denied " + permission)
+            isDenied()
+        } else {
+            if(ActivityCompat.checkSelfPermission(activity,permission) == PackageManager.PERMISSION_GRANTED) {
+                Log.d(TAG, "permission Allowed " + permission)
+                isGranted()
+            } else{
+                Log.d(TAG, "permission set to never ask again " + permission);
+                isNeverAskAgain()
+            }
+        }
+    }
+
+    fun checkPermissionsResult(activity : Activity, permissions : Array<String>, grantResults : IntArray,isGranted : () -> Unit, isNeverAskAgain : () -> Unit = {}, isDenied : () -> Unit) {
+        when {
+            grantResults.all { results -> results ==  PackageManager.PERMISSION_GRANTED} -> {
+                Log.d(TAG,"isGranted()")
+                isGranted()
+            }
+            permissions.filter { permission -> ActivityCompat.shouldShowRequestPermissionRationale(activity, permission) && ContextCompat.checkSelfPermission(activity, permission) == PackageManager.PERMISSION_DENIED }.none() -> {
+                Log.d(TAG,"isNeverAskAgain()")
+                isNeverAskAgain()
+            }
+            grantResults.filter { results -> results ==  PackageManager.PERMISSION_DENIED}.isNotEmpty() -> {
+                Log.d(TAG,"isDenied()")
+                isDenied()
+            }
+        }
+    }
+
+    public fun showRationalDialog(activity : Activity, message : String) {
+        Log.d(TAG,"showRationalDialog($activity,$message")
+        val builder = activity.let { AlertDialog.Builder(it) }
+        builder.setTitle("Manifest Permissions")
+        builder.setMessage(message)
+        builder.setPositiveButton("SETTINGS") { dialog, which ->
+            dialog.dismiss()
+            showAppPermissionSettings(activity)
+        }
+        builder.setNegativeButton("NOT NOW") { dialog, which ->
+            dialog.dismiss()
+        }
+        builder.show()
+    }
+
+    private fun showAppPermissionSettings(activity : Activity) {
+        Log.d("PermissionsResult", "showAppPermissionSettings()")
+        val intent = Intent(
+            Settings.ACTION_APPLICATION_DETAILS_SETTINGS,
+            Uri.fromParts("package", activity.packageName, null)
+        )
+        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
+        intent.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY)
+        intent.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS)
+        activity.startActivityForResult(intent, SETTINGS_PERMISSION_CODE)
+    }
+}
\ No newline at end of file
Index: gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Project-wide Gradle settings.\r\n\r\n# IDE (e.g. Android Studio) users:\r\n# Gradle settings configured through the IDE *will override*\r\n# any settings specified in this file.\r\n\r\n# For more details on how to configure your build environment visit\r\n# http://www.gradle.org/docs/current/userguide/build_environment.html\r\n\r\n# Specifies the JVM arguments used for the daemon process.\r\n# The setting is particularly useful for tweaking memory settings.\r\norg.gradle.jvmargs=-Xmx1536m\r\n\r\n# When configured, Gradle will run in incubating parallel mode.\r\n# This option should only be used with decoupled projects. More details, visit\r\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\r\n# org.gradle.parallel=true\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
diff --git a/gradle.properties b/gradle.properties
--- a/gradle.properties	
+++ b/gradle.properties	
@@ -15,3 +15,7 @@
 # This option should only be used with decoupled projects. More details, visit
 # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
 # org.gradle.parallel=true
+
+android.useAndroidX=true
+# Automatically convert third-party libraries to use AndroidX
+android.enableJetifier=true
\ No newline at end of file
Index: app/src/main/java/com/example/benedict/simstate/SimChangedListener.kt
===================================================================
diff --git a/app/src/main/java/com/example/benedict/simstate/SimChangedListener.kt b/app/src/main/java/com/example/benedict/simstate/SimChangedListener.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/benedict/simstate/SimChangedListener.kt	
@@ -0,0 +1,29 @@
+package com.example.benedict.simstate
+
+import android.telephony.PhoneStateListener
+import android.telephony.ServiceState
+import android.telephony.SignalStrength
+import android.util.Log
+
+public class SimChangedListener : PhoneStateListener {
+
+    private val TAG : String = SimChangedListener::class.java.getSimpleName();
+    private val mainViewModel : MainViewModel;
+
+    constructor(mainViewModel : MainViewModel) {
+        Log.d(TAG,"constructor(" + mainViewModel + ")");
+        this.mainViewModel = mainViewModel;
+    }
+
+    override fun onServiceStateChanged(serviceState : ServiceState?) {
+        super.onServiceStateChanged(serviceState)
+        Log.d(TAG,"onServiceStateChanged(" + serviceState + ")");
+        mainViewModel.checkSimState();
+    }
+
+    override fun onSignalStrengthsChanged(signalStrength: SignalStrength?) {
+        super.onSignalStrengthsChanged(signalStrength)
+        Log.d(TAG,"onSignalStrengthsChanged(" + signalStrength + ")");
+        mainViewModel.checkSimState();
+    }
+}
\ No newline at end of file
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Top-level build file where you can add configuration options common to all sub-projects/modules.\r\n\r\nbuildscript {\r\n    repositories {\r\n        jcenter()\r\n        google()\r\n    }\r\n    dependencies {\r\n        classpath 'com.android.tools.build:gradle:3.4.1'\r\n\r\n        // NOTE: Do not place your application dependencies here; they belong\r\n        // in the individual module build.gradle files\r\n    }\r\n}\r\n\r\nallprojects {\r\n    repositories {\r\n        jcenter()\r\n        google()\r\n    }\r\n}\r\n\r\ntask clean(type: Delete) {\r\n    delete rootProject.buildDir\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	
+++ b/build.gradle	
@@ -1,13 +1,14 @@
 // Top-level build file where you can add configuration options common to all sub-projects/modules.
 
 buildscript {
+    ext.kotlin_version = '1.4.20'
     repositories {
         jcenter()
         google()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:3.4.1'
-
+        classpath 'com.android.tools.build:gradle:4.1.1'
+        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
         // NOTE: Do not place your application dependencies here; they belong
         // in the individual module build.gradle files
     }
